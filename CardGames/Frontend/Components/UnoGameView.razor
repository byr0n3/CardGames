@using CardGames.Extensions
@using CardGames.Core.Extensions
@using CardGames.Core.Uno
@using CardGames.Frontend.Components.Uno

<BaseGameView Game="@(Game)" CurrentPlayer="@(CurrentPlayer)" OnLeaveGame="@(OnLeaveGame)">
	@{ var cardEnumerator = CurrentPlayer.CardsEnumerator(); }

	<div>
		<UnoCard Card="@(Game.TopCard)" />

		<button type="button" class="btn btn-primary" @onclick="@(DrawCard)" disabled="@(!Game.CanDrawCard(CurrentPlayer))">
			Draw
		</button>
	</div>

	<div class="d-flex flex-row flex-nowrap align-items-center gap-3">
		@while (cardEnumerator.MoveNext())
		{
			var card = cardEnumerator.Current;

			<UnoCard Card="@(card)" OnCardClick="@(PlayCard)" />
		}
	</div>

	@foreach (var player in Game.Players)
	{
		if (player == CurrentPlayer)
		{
			continue;
		}

		<div class="d-flex flex-row flex-nowrap align-items-center gap-3">
			@(player.Name.Str()) has @(player.CardCount.Str()) card(s).
		</div>
	}

	@if ((Game.Flags & UnoGameFlags.PickColor) != UnoGameFlags.None)
	{
		<div class="position-absolute top-0 start-0 bottom-0 end-0 bg-black bg-opacity-50" style="z-index: 1000;">
			@if (Game.GetCurrentPlayer() != CurrentPlayer)
			{
				<h1 class="text-white text-center">@Game.GetCurrentPlayer().Name.Str() is picking a color...</h1>
			}
			else
			{
				<h1 class="text-white text-center">Pick a color:</h1>

				<div>
					<button type="button" @onclick="@(() => PickColor(CardColor.Red))">
						Red
					</button>
					<button type="button" @onclick="@(() => PickColor(CardColor.Green))">
						Green
					</button>
					<button type="button" @onclick="@(() => PickColor(CardColor.Blue))">
						Blue
					</button>
					<button type="button" @onclick="@(() => PickColor(CardColor.Yellow))">
						Yellow
					</button>
				</div>
			}
		</div>
	}
</BaseGameView>
