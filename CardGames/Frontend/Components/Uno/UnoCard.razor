@using CardGames.Core.Uno
@using CardGames.Core.Utilities
@using CardGames.Extensions
@using CardGames.Core.Extensions

<div class="uno-card" style="@(style)" @onclick="@(OnClick)">
</div>

@code {

	[Parameter] public required Card Card { get; set; }

	[Parameter] public System.Action<Card>? OnCardClick { get; set; }

	private string style = string.Empty;

	protected override void OnParametersSet() =>
		style = UnoCard.GetCardStyle(Card);

	private void OnClick() =>
		OnCardClick?.Invoke(Card);

	private static string GetCardStyle(Card card)
	{
		const string valueVar = "--value";
		const string colorVar = "--color";

		// Weird mapping due to the sprite sheet layout
		var valueIndex = card.Color is CardColor.Wild ? (int)CardValue.DrawTwo : ((int)card.Value - 1);
		var colorIndex = (card.Value) switch
		{
			CardValue.Wild     => 0,
			CardValue.DrawFour => 1,
			_                  => ((int)card.Color - 1),
		};

		// (variable length + : + int + ;) * 2
		System.Span<char> temp = stackalloc char[valueVar.Length + 2 + valueIndex.GetCharSize() + colorVar.Length + 2 + colorIndex.GetCharSize()];

		var builder = new CharStringBuilder(temp);

		builder.Append(valueVar);
		builder.Append(':');
		builder.Append(valueIndex);
		builder.Append(';');
		builder.Append(colorVar);
		builder.Append(':');
		builder.Append(colorIndex);
		builder.Append(';');

		return builder.ToString();
	}

}
